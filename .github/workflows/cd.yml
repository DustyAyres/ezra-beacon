name: CD

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: choice
        required: true
        options:
          - dev
  
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'dev' }}
    # Only run if CI was successful or triggered manually
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to ACR
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}
    
    - name: Determine environment
      id: determine-env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          # Default to dev for automatic deployments
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.ACR_LOGIN_SERVER }}/ezra-beacon-frontend
          ${{ secrets.ACR_LOGIN_SERVER }}/ezra-beacon-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{date 'YYYYMMDD'}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.determine-env.outputs.environment }}-latest
    
    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/backend.Dockerfile
        push: true
        tags: ${{ secrets.ACR_LOGIN_SERVER }}/ezra-beacon-backend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/frontend.Dockerfile
        push: true
        tags: ${{ secrets.ACR_LOGIN_SERVER }}/ezra-beacon-frontend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          REACT_APP_API_URL=${{ vars.REACT_APP_API_URL || '/api' }}
          REACT_APP_AZURE_CLIENT_ID=${{ secrets.REACT_APP_AZURE_CLIENT_ID }}
          REACT_APP_AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
          REACT_APP_AZURE_REDIRECT_URI=${{ vars.REACT_APP_AZURE_REDIRECT_URI }}
          REACT_APP_BYPASS_AUTH=${{ 'false' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
  
  deploy-infrastructure:
    name: Deploy Infrastructure with Terraform
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'dev' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Determine environment
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "name=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "name=dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=ezrabeacon-${{ steps.env.outputs.name }}.tfstate" \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_USE_OIDC: true
    
    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        terraform plan \
          -var-file="environments/${{ steps.env.outputs.name }}.tfvars" \
          -var="azure_ad_tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
          -var="azure_ad_client_id=${{ secrets.REACT_APP_AZURE_CLIENT_ID }}" \
          -var="azure_ad_domain=${{ secrets.AZURE_AD_DOMAIN }}" \
          -var="acr_login_server=${{ secrets.ACR_LOGIN_SERVER }}" \
          -var="acr_username=${{ secrets.ACR_USERNAME }}" \
          -var="acr_password=${{ secrets.ACR_PASSWORD }}" \
          -var="docker_image_tag=${{ needs.build-and-push.outputs.image-tag }}" \
          -out=tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_USE_OIDC: true
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_USE_OIDC: true
    
    - name: Get Terraform Outputs
      if: success()
      working-directory: ./terraform
      run: |
        echo "FRONTEND_URL=$(terraform output -raw frontend_url)" >> $GITHUB_ENV
        echo "BACKEND_URL=$(terraform output -raw backend_url)" >> $GITHUB_ENV
        echo "RESOURCE_GROUP=$(terraform output -raw resource_group_name)" >> $GITHUB_ENV
        echo "CAE_NAME=$(terraform output -raw container_apps_environment_name)" >> $GITHUB_ENV
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_USE_OIDC: true
    
    - name: Update Frontend Container App with correct URLs
      if: success()
      run: |
        # Extract container app names and URLs from Terraform output
        FRONTEND_APP_NAME=$(terraform output -raw frontend_app_name)
        FRONTEND_URL=$(terraform output -raw frontend_url)
        BACKEND_URL=$(terraform output -raw backend_url)
        
        az containerapp update \
          --name $FRONTEND_APP_NAME \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --set-env-vars "REACT_APP_API_URL=${{ env.BACKEND_URL }}/api" "REACT_APP_AZURE_REDIRECT_URI=${{ env.FRONTEND_URL }}" 
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_USE_OIDC: true
    
    - name: Update Backend Container App with Frontend URL for CORS
      if: success()
      run: |
        # Extract container app name from Terraform output
        BACKEND_APP_NAME=$(terraform output -raw backend_app_name)
        FRONTEND_URL=$(terraform output -raw frontend_url)
        
        az containerapp update \
          --name $BACKEND_APP_NAME \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --set-env-vars "FRONTEND_URL=$FRONTEND_URL" 
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_USE_OIDC: true
    
    - name: Summary
      if: success()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ steps.env.outputs.name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend URL**: ${{ env.FRONTEND_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend URL**: ${{ env.BACKEND_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image Tag**: ${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Type**: ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Automatic (Post-CI)' }}" >> $GITHUB_STEP_SUMMARY
  
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-infrastructure]
    if: failure()
    steps:
    - name: Create failure summary
      run: |
        echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Automatic (Post-CI)' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
