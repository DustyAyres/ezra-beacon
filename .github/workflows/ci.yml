name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./backend
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: ./backend
    
    # TODO: Uncomment when tests are ready
    # - name: Test
    #   run: dotnet test --no-restore --verbosity normal --logger trx --results-directory "TestResults"
    #   working-directory: ./backend
    
    # - name: Upload test results
    #   uses: actions/upload-artifact@v4
    #   if: always()
    #   with:
    #     name: test-results
    #     path: backend/TestResults
    #     retention-days: 7

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Build
      run: npm run build
      working-directory: ./frontend
      env:
        CI: true
        REACT_APP_API_URL: ${{ vars.REACT_APP_API_URL || 'http://localhost:5000/api' }}
        REACT_APP_AZURE_CLIENT_ID: ${{ vars.REACT_APP_AZURE_CLIENT_ID || 'dummy-client-id' }}
        REACT_APP_AZURE_TENANT_ID: ${{ vars.REACT_APP_AZURE_TENANT_ID || 'dummy-tenant-id' }}
        REACT_APP_AZURE_REDIRECT_URI: ${{ vars.REACT_APP_AZURE_REDIRECT_URI || 'http://localhost:3000' }}
        REACT_APP_BYPASS_AUTH: ${{ vars.REACT_APP_BYPASS_AUTH || 'false' }}
    
    # TODO: Uncomment when tests are ready
    # - name: Test
    #   run: npm test -- --coverage --watchAll=false
    #   working-directory: ./frontend
    #   env:
    #     CI: true
    
    # - name: Upload coverage reports
    #   uses: actions/upload-artifact@v4
    #   if: always()
    #   with:
    #     name: coverage-report
    #     path: frontend/coverage
    #     retention-days: 7

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/backend.Dockerfile
        push: false
        tags: ezra-beacon-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Frontend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/frontend.Dockerfile
        push: false
        tags: ezra-beacon-frontend:${{ github.sha }}
        build-args: |
          REACT_APP_API_URL=${{ vars.REACT_APP_API_URL || 'http://localhost:5000/api' }}
          REACT_APP_AZURE_CLIENT_ID=${{ vars.REACT_APP_AZURE_CLIENT_ID || 'dummy-client-id' }}
          REACT_APP_AZURE_TENANT_ID=${{ vars.REACT_APP_AZURE_TENANT_ID || 'dummy-tenant-id' }}
          REACT_APP_AZURE_REDIRECT_URI=${{ vars.REACT_APP_AZURE_REDIRECT_URI || 'http://localhost:3000' }}
          REACT_APP_BYPASS_AUTH=${{ vars.REACT_APP_BYPASS_AUTH || 'false' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: .NET Format Check
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic
      working-directory: ./backend
      continue-on-error: true
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: ESLint Check
      run: npm run lint || true
      working-directory: ./frontend
      continue-on-error: true
    
    # TODO: Add more quality checks as needed
    # - name: Run SonarCloud Scan
    # - name: Security scanning with Snyk
    # - name: Dependency vulnerability check
